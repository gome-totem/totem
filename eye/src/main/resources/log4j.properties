log4j.rootLogger=INFO, stdout, R
#此句为将等级为INFO的日志信息输出到stdout和R这两个目的地，stdout和R的定义在下面的代码，可以任意起名。
#等级可分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL，如果配置OFF则不打出任何信息。
#如果配置为INFO这样只显示INFO, WARN, ERROR的log信息，而DEBUG信息不会被显示。 

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#此句为定义名为stdout的输出端是哪种类型，可以是 
#org.apache.log4j.ConsoleAppender（控制台）
#org.apache.log4j.FileAppender（文件）
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方） 

log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#此句为定义名为stdout的输出端的layout是哪种类型，可以是 
#org.apache.log4j.HTMLLayout（以HTML表格形式布局）
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息） 

log4j.appender.stdout.layout.ConversionPattern=[cloud eye] %d{yyyy-MM-dd HH:mm:ss} %p [%t] %C.%M(%L) | %m%n
#如果使用pattern布局就要指定的打印信息的具体格式ConversionPattern，打印参数如下： 
#%m 输出代码中指定的消息 
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#%r 输出自应用启动到输出该log信息耗费的毫秒数 
#%c 输出所属的类目，通常就是所在类的全名 
#%t 输出产生该日志事件的线程名 
#%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n” 
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。 
#[QC]是log信息的开头，可以为任意字符，一般为项目简称。 
#例如：[TS] 2011-07-13 11:00:00 DEBUG [main] AbstractBeanFactory.getBean(189) | Returning cached instance of singleton bean 'MyAutoProxy' 

#log4j.appender.R.File = org.apache.log4j.RollingFileAppender
#log4j.appender.R.MaxFileSize = 10MB
#log4j.appender.R.MaxBackupIndex = 0

log4j.logger.org.apache.shiro.realm.AuthorizingRealm=OFF
log4j.logger.com.gome.totem.sniper.util.ZookeeperUtils=OFF
log4j.logger.org.springframework = WARN

log4j.appender.R=org.apache.log4j.DailyRollingFileAppender
#此句与第6行一样。定义名为R的输出端的类型为每天产生一个日志文件。 

log4j.appender.R.File = /usr/local/totem/log/cloudEye.log
#此句为定义名为R的输出端的文件名为 \\log4j\\v1_contace.log可以自行修改。

log4j.appender.R.layout = org.apache.log4j.PatternLayout
#此句与第14行一样。定义名为stdout的输出端的layout是哪种类型

log4j.appender.R.layout.ConversionPattern =[cloud eye] %d{yyyy-MM-dd HH\:mm\:ss} %p [%t] %C.%M(%L) | %m%n

